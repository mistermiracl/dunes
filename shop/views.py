from datetime import datetime
import json
from django.shortcuts import render, reverse
from django.http import HttpResponse, HttpResponseRedirect, Http404
from django.template import loader, Template, RequestContext
from dunes.data_access.data_access_object.dao_factory import DaoFactory
from dunes.data_access.data_access_entity.entity import Customer, OrderDetails, Orders, Product
from dunes.data_access.data_transfer_object.dto import OrdersDto, OrderDetailsDto


#from dunes.data_access.data_access_object._product_dao import ProductDao
#from django.conf import settings

# Create your views here.

__CURRENT_USER = 'CURRENT_USER'

def index(request):
    #return HttpResponse(loader.get_template('shop/login.html').render())
    #HERE TOO, I DONT QUITE GET IT
    return render(request, 'shop/login.html')
 
def login(request):
    if not request.POST.get('username', None) or not request.POST.get('password', None):
        #print('no username or password')
        #temp: Template = loader.get_template('shop/login.html')
        
        context = RequestContext(request)
        #return HttpResponse(temp.render(context=context, request=request))#loader.get_template('shop/login.html').render())#(RequestContext(request)
        #return render_to_response('shop/login.html', context_instance=context)

        #IT SEEMS THAT THE ONLY WAY FOR US TO HANDLE THE CSRF_TOKEN IS TO USE THE RENDER SHORTCUT BECAUSE WE CANT ATTACH A REQUEST CONTEXT OURSELVES
        return render(request, 'shop/login.html', context={'error_message': 'Username and/or password cannot be blank'})
    else:
        print('username and password found')
        customer_dao = DaoFactory.get_customer_dao()
        customer = customer_dao.login(request.POST['username'], request.POST['password'])
        if customer:
            request.session['CURRENT_USER'] = json.dumps(customer.as_dict())
            #HTTP RESPONSE REDIRECT WORKS WITHOUT PROBLES THOU
            return HttpResponseRedirect(reverse('shop:store'))
            #return render(request, reverse('shop:products'))
        else:
            #FOR SOME REASON THOU IT ISN'T NEEDED WHEN USING A DICT AS CONTEXT THIS IS WEIRD OR MAYBE IT ISN'T THAT
            #SO IT SEEMS IT CAN ONLY HANDLE 1 SUBMIT THEN IT FALLS JUST LIKE THE OTHERS, NEED TO USE RENDER HERE TOO
            #return HttpResponse(loader.get_template('shop/login.html').render({'error_message': 'Incorrect Username and/or password'}))
            return render(request, 'shop/login.html', context={'error_message': 'Incorrect Username and/or password'})

def register(request):
    if not request.POST.get('username', None) or not request.POST.get('password', None):
        #return HttpResponse(loader.get_template('shop/register.html').render())
        return render(request, 'shop/register.html')
    else:
        customer_dao = DaoFactory.get_customer_dao()
        customer_dao.insert(Customer(
            None,#ID AUTOGENERATED
            request.POST['username'], 
            request.POST['password'],
            request.POST['name'],
            request.POST['last_name'],
            request.POST['birthday'],
            request.POST['email'],
            None
        ))
        return HttpResponseRedirect(reverse('shop:index'))




def store(request):
    #print(type(request.session['CURRENT_USER']))
    try:
        current_user = json.loads(request.session[__CURRENT_USER])
    except KeyError as ex:
        current_user = None
        print(ex) 
    if current_user:
        #print()
        #print(current_user['name'], ' ' + current_user['last_name'])
        #request.session.flush() #DELETES THE CURRENT SESSION
        
        or_dao = DaoFactory.get_order_dao()
        or_det_dao = DaoFactory.get_order_details_dao()
        pro_dao = DaoFactory.get_product_dao()

        current_order = or_dao.find_current(current_user['identifier'])
        
        if current_order:
            current_order_details = or_det_dao.find_all(current_order.identifier)
            
            order_details_dto = [OrderDetailsDto(pro_dao.find(det.product_id), det.unit_price * det.quantity, order_detail=det) for det in current_order_details]
            
            full_price = sum(map(lambda det: det.total_price, order_details_dto))
            
            current_order_dto = OrdersDto(order_details_dto, full_price, order=current_order)    
            
        else:
            current_order_dto = None
        #or_det_dao.insert(OrderDetails(None, 3, 1, 10, 40.3))
        #print(or_det_dao.find_all(3).__len__())

        #sql = '%s\\config\\schema.sql' % settings.PROJECT_ROOT #ESCAPE THE BACKSLASH TO PREVENT WARNING FROM LINTER
        #with open(sql, 'r') as f:
            #lines = [line.replace('\n', '') for line in f.readlines()]
            #[print(line) for line in lines]
        
        #template: Template = loader.get_template('shop/products.html')
        #res = HttpResponse(template.render({ 'products': pro_dao.find_all() }))
        res = render(request, 'shop/store.html', context={ 'products': pro_dao.find_all(), 
                                                           'current_order_dto': current_order_dto})
        res["Access-Control-Allow-Origin"] = "*"
        #res["Access-Control-Allow-Methods"] = "GET, OPTIONS" # IT SEEMS THAT THESE ARE NOT NEEDED
        #res["Access-Control-Max-Age"] = "1000"
        #res["Access-Control-Allow-Headers"] = "X-Requested-With, Content-Type" 
        return res
    else:
        raise Http404('You should not be here, only registered users have the RIGHTS to be here')

def cart_add_detail(request):
    current_user = json.loads(request.session[__CURRENT_USER])  
    #pro_id = request.POST['product_id']
    pro_id = json.loads(request.body)['product_id']

    result = { } 

    order_dao = DaoFactory.get_order_dao()
    order_details_dao = DaoFactory.get_order_details_dao()
    pro_dao = DaoFactory.get_product_dao()

    if pro_id:
        current_order = order_dao.find_current(current_user['identifier'])
        unit_price = pro_dao.find(pro_id).price
        if current_order:
            pass
        else:
            #CREATE AN ORDER IF THER IS NONE
            order_dao.insert(Orders(None, datetime.now(), True, current_user['identifier']))
            current_order = order_dao.find_current(current_user['identifier'])
            
        if list(filter(lambda det: det.product_id == pro_id, order_details_dao.find_all(current_order.identifier))):
            result['error'] = 'This product was already added'
        else:
            order_details_dao.insert(OrderDetails(None, current_order.identifier, pro_id, 1, unit_price))
            result['message'] = 'Insertion successful'
    else:
        result['error'] = 'No product_id was provided'

    res = HttpResponse(json.dumps(result))
    res["Access-Control-Allow-Origin"] = "*"
    return res

def cart_delete_detail(request):
    order_detail_id = json.loads(request.body)['detail_id']
    result = False

    if order_detail_id:
        order_details_dao = DaoFactory.get_order_details_dao()
        order_details_dao.delete(order_detail_id)
        result = True
    else:
        result = False

    res = HttpResponse(result)
    res["Access-Control-Allow-Origin"] = "*"
    return res

def cart_get_cart(request):
    
    order_dao = DaoFactory.get_order_dao()
    order_details_dao = DaoFactory.get_order_details_dao()
    pro_dao = DaoFactory.get_product_dao()
    current_user = json.loads(request.session[__CURRENT_USER])

    current_order = order_dao.find_current(current_user['identifier'])
    
    if current_order:
        current_order_details = order_details_dao.find_all(current_order.identifier)
        current_order_details_dto = [OrderDetailsDto(pro_dao.find(det.product_id), det.unit_price * det.quantity, det) for det in current_order_details]
        full_price = sum(map(lambda det: det.total_price, current_order_details_dto))
        current_order_dto = OrdersDto(current_order_details_dto, full_price, current_order)
    else:
        current_order_dto = None

    res = HttpResponse(loader.get_template('shop/cart.html').render({'current_order_dto': current_order_dto}))
    res["Access-Control-Allow-Origin"] = "*"

    return res


def cart_update_detail(request):
    result = {}
    order_details_dao = DaoFactory.get_order_details_dao()

    current_detail = json.loads(request.body)
    
    if current_detail:
        order_details_dao.update(OrderDetails(current_detail['detail_id'], None, None, current_detail['quantity'], None))
        result['message'] = 'Update successful'
    
    res = HttpResponse(json.dumps(result))
    res["Access-Control-Allow-Origin"] = "*"
    return res


def cart_update_cart(request):
    result = {}
    order_dao = DaoFactory.get_order_dao()
    current_order_id = json.loads(request.body)['order_id']
    current_order_state = json.loads(request.body)['order_state']

    if current_order_id:
        order_dao.update(Orders(current_order_id, None, current_order_state, None))
        result['message'] = 'Update successful'

    res = HttpResponse(json.dumps(result))
    res["Access-Control-Allow-Origin"] = "*"
    return res

















# def login(request, username, password):
#     #username = user.split('/')[0]
#     #password = user.split('/')[1]
#     print(type(password))
#     html = 'Username: %s - Password: %s'
#     return HttpResponse(html % (username, password))





    # html = """<style>
    #             table, td, th {
    #                 border: 1px solid black; 
    #                 border-collapse: collapse;
    #                 text-align: center;
    #             }
    #           </style>
    #           <h1>Getting started</h1>
    #           <table>
    #             <thead>
    #                 <tr>
    #                     <th>ID</th>
    #                     <th>Name</th>
    #                     <th>Description</th>
    #                     <th>Price</th>
    #                     <th>Stock</th>
    #                     <th>Image</th>
    #                 </tr>
    #             </thead>
    #             <tbody>"""
    # for pro in pro_dao.find_all():
    #     html += f"""<tr>
    #                     <td>{pro.identifier}</td>
    #                     <td>{pro.name}</td>
    #                     <td>{pro.description}</td>
    #                     <td>{pro.price}</td>
    #                     <td>{pro.stock}</td>
    #                     <td><img height='100' width='200' src='{pro.image_path}'></img></td>
    #                  </tr>"""
    # html += '</tbody></table>'
    #return HttpResponse(html)
